version: "3"

# ports to:from
# :ro read only

services:
  {% if 'cloudflare' in services -%}
  {% with srv_name = services.cloudflare.srv_name -%}
  #
  # Tunel to expose services
  #
  cloudflare:
    image: cloudflare/cloudflared
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    environment:
      - TUNNEL_TOKEN={{ cloudflare_token }}
    command: tunnel --no-autoupdate run
  {% endwith %}
  {% endif %}

  {% if 'portainer' in services -%}
  {% with srv_name = services.portainer.srv_name, port_server = services.portainer.port_server, port_expose = services.portainer.port_expose -%}
  #
  # Docker containers manager
  #
  portainer:
    image: portainer/portainer-ce:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - 8000:8000
      - 9443:9443
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_dir }}/portainer:/data"
    command: --http-enabled
  {% endwith %}
  {% endif %}

  {% if 'homer' in services -%}
  {% with srv_name = services.homer.srv_name, port_server = services.homer.port_server, port_expose = services.homer.port_expose -%}
  #
  # Page with links to all services
  #
  homer:
    image: b4bz/homer:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "{{ docker_dir }}/homer:/www/assets"
    environment:
      - INIT_ASSETS=1
    user: {{ guid }}:{{ guid }}
  {% endwith %}
  {% endif %}

  {% if 'vaultwarden' in services -%}
  {% with srv_name = services.vaultwarden.srv_name, port_server = services.vaultwarden.port_server, port_expose = services.vaultwarden.port_expose -%}
  #
  # Password manager
  #
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "{{ docker_dir }}/vaultwarden/data/:/data"
  {% endwith %}
  {% endif %}

  {% if 'jellyfin' in services -%}
  {% with srv_name = services.jellyfin.srv_name, port_server = services.jellyfin.port_server, port_expose = services.jellyfin.port_expose -%}
  #
  # Video and music streaming
  #
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "{{ docker_dir }}/jellyfin/config:/config"
      - "{{ docker_dir }}/jellyfin/cache:/cache"
      - "{{ folders.movies }}:/movies"
      - "{{ folders.music }}:/music"
      - "{{ folders.downloads }}:/downloads"
      - "{{ folders.screenrecording }}:/screenrecording"
    environment:
      - PUID={{ guid }}
      - PGID={{ guid }}
      - TZ={{ timezone }}
  {% endwith %}
  {% endif %}

  {% if 'filebrowser' in services -%}
  {% with srv_name = services.filebrowser.srv_name, port_server = services.filebrowser.port_server, port_expose = services.filebrowser.port_expose -%}
  #
  # Simple file browser with view and share functions
  #
  filebrowser:
    image: filebrowser/filebrowser:s6
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "{{ mnt_folder }}:/srv"
      - "{{ docker_dir }}/filebrowser/database:/database"
      - "{{ docker_dir }}/filebrowser/config:/config"
    environment:
      - PUID={{ guid }}
      - PGID={{ guid }}
  {% endwith %}
  {% endif %}

  {% if 'deluge' in services -%}
  {% with srv_name = services.deluge.srv_name, port_server = services.deluge.port_server, port_expose = services.deluge.port_expose -%}
  #
  # BitTorrent client
  #
  Deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
      - 6881:6881
      - 6881:6881/udp
    volumes:
      - "{{ docker_dir }}/deluge/config:/config"
      - "{{ folders.downloads }}:/downloads"
    environment:
      - PUID={{ guid }}
      - PGID={{ guid }}
      - TZ={{ timezone }}
  {% endwith %}
  {% endif %}

  {% if 'photoprism' in services -%}
  {% with srv_name = services.photoprism.srv_name, port_server = services.photoprism.port_server, port_expose = services.photoprism.port_expose -%}
  #
  # Photo and video storage with smart lables
  #
  photoprism:
    image: photoprism/photoprism:latest
    container_name: {{ srv_name }}
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    ports:
      - {{ port_expose }}:{{ port_server }}
    volumes:
      - "{{ folders.memories }}:/photoprism/originals"
      - "{{ docker_dir }}/photoprism/app/storage:/photoprism/storage"
    environment:
      PHOTOPRISM_ADMIN_USER: "{{ username }}"
      PHOTOPRISM_ADMIN_PASSWORD: "{{ password }}"
      PHOTOPRISM_AUTH_MODE: "password"
      PHOTOPRISM_ORIGINALS_LIMIT: 10000              # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"
      PHOTOPRISM_LOG_LEVEL: "info"
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 80                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_JPEG_SIZE: 720
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_DATABASE_NAME: {{ photoprism.db.name }}
      PHOTOPRISM_DATABASE_USER: {{ username }}
      PHOTOPRISM_DATABASE_PASSWORD: {{ password }}
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_UID: {{ guid }}
      PHOTOPRISM_GID: {{ guid }}
      PHOTOPRISM_UMASK: 0000
      PHOTOPRISM_THUMB_UNCACHED: "true"
      PHOTOPRISM_THUMB_SIZE: 720
      PHOTOPRISM_THUMB_SIZE_UNCACHED: 720
    stop_grace_period: 10s
    depends_on:
      - mariadb
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    user: {{ guid }}:{{ guid }}
    working_dir: "/photoprism" # do not change or remove

  #
  # Photoprism database
  #
  mariadb:
    image: mariadb:10.11
    container_name: mariadb
    restart: unless-stopped
    networks:
      - {{ docker_network }}
    volumes:
      - "{{ docker_dir }}/mariadb/db:/var/lib/mysql"
    environment:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      TZ: {{ timezone }}
      MARIADB_ROOT_PASSWORD: {{ photoprism.db.root_password }}
      MARIADB_DATABASE: {{ photoprism.db.name }}
      MARIADB_USER: {{ username }}
      MARIADB_PASSWORD: {{ password }}
    stop_grace_period: 10s
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    command: mariadbd --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
  {% endwith %}
  {% endif %}

networks:
  {{ docker_network }}:
    external: true